#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <conio.h>
struct node *head1,*head2;
struct node{
    int data;
    struct node *next;
};

struct node* create(int num){
    struct node* newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=num;
    newnode->next=NULL;
    return newnode;
}


//insertion in the beginning
void push(int num,struct node **head)
{
    struct node *newnode;
    newnode=create(num);
    if((*head)==NULL){
        (*head)=newnode;
    }
    else{
        newnode->next=(*head);
        (*head)=newnode;
    }
}

//insertion at the end 
void append(int num,struct node **head)
{
    struct node *newnode,*temp=(*head);
    newnode=create(num);
    if((*head)==NULL){
      (*head)=newnode;
    }
    else{
        temp=(*head);
        while(temp->next!=NULL)
            temp=temp->next;
    temp->next=newnode;
    }
}

//insertion at the given position
void insert(int num,struct node **head)
{
    int pos;
    struct node *newnode,*temp=(*head);
    newnode=create(num);
    if((*head)==NULL)
        (*head)=newnode;
    else{
        temp=(*head);
        printf("enter the position:");
        scanf("%d",&pos);
        if(pos==1){
            newnode->next=(*head);
            (*head)=newnode;
        }
        else{
        for(int i=1;i<pos-1;i++)
            {
                temp=temp->next;
                if(temp==NULL){
                    printf("Invalid position\n");
                    return;
                }
            }
        newnode->next=temp->next;
        temp->next=newnode;
        }
    }
}

//deletion from the front
void pop(struct node **head)
{
    struct node *temp;
    if((*head)==NULL)
        printf("Empty list");
    else{
        temp=(*head);
        (*head)=(*head)->next;
        free(temp);
    }
}

//deletion at the end
void end(struct node **head)
{
    struct node *prev,*temp;
    if((*head)==NULL)
        printf("Empty list");
    else if((*head)->next==NULL){
        free((*head));
        (*head)=NULL;
    }
    else{
        temp=(*head);
        while(temp->next!=NULL){
            prev=temp;
            temp=temp->next;
        }
        prev->next=NULL;
        free(temp);
    }
}

//deletion from the given position
void deletepos(struct node **head)
{
    struct node *prev,*temp;
    int pos;
    if((*head)==NULL)
        printf("Empty list");
    else{
        temp=(*head);
        printf("enter the position:");
        scanf("%d",&pos);
        if(pos==1){
            (*head)=(*head)->next;
            free(temp);
        }
        else{
        for(int i=0;i<pos-1;i++){
            prev=temp;
            temp=temp->next;
            if(temp==NULL){
                printf("invalid position\n");
                return;
            }
        }
        prev->next=temp->next;
        free(temp);
        }
}
}

void display(struct node *head)
{
    struct node *temp;
    temp=head;
    if(temp==NULL)
        printf("no elements to display\n\n");
    while(temp!=NULL){
        printf("%d\n",temp->data);
        temp=temp->next;
    }
}

void reverse(struct node **head){
    struct node *prev=NULL,*current=(*head),*next=NULL;
    while(current!=NULL){
        next=current->next;
        current->next=prev;
        prev=current;
        current=next;
    }
    (*head)=prev;
}

void sort(struct node **head){
    struct node *temp=(*head),*ref;
    int ptr;
    if((*head)==NULL){
        printf("List is empty");
    }
    else{
        ref=(*head)->next;
        for(temp=(*head);temp!=NULL;temp=temp->next){
            for(ref=temp->next; ref!=NULL; ref=ref->next){
                if(temp->data>=ref->data){
                    ptr=temp->data;
                    temp->data=ref->data;
                    ref->data=ptr;
                }
            }
                
        }
    }
}

void concate(){
    struct node *head3=head1,*temp=head3;
    if(head3==NULL && head2==NULL){
        printf("Both lists are empty\n");
    }
    else if(head3==NULL){
        head3=head2;
    }
    else{
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=head2;
    }
    display(head3);
}

void merge(){
struct node *temp1=head1,*temp2=head2,*head3=NULL,*ptr;
    if(head1==NULL && head2==NULL){
        printf("Empty list");
        return;
    }
    else if(head2==NULL){
        display(head1);
        return;
    }
    else if(head1==NULL){
        display(head2);
        return;
    }
    //set head
    if(temp1->data<=temp2->data){
        head3=temp1;
        temp1=temp1->next;
    }
    else{
        head3=temp2;
        temp2=temp2->next;
    }
    struct node *temp=NULL;
    ptr=head3;
    while(temp1!=NULL && temp2!=NULL){
        if(temp1->data<=temp2->data){
            temp=temp1;
            temp1=temp1->next;
        }
        else{
            temp=temp2;
            temp2=temp2->next;
        }
        ptr->next=temp;
        ptr=temp;
    }
    if(temp1!=NULL){
        ptr->next=temp1;
    }
    else{
        ptr->next=temp2;
    }
    display(head3);
}

int main()
{
    int ch,num,c;
    while(1)
    {
       printf("\n************    Main Menu    ************");
       printf("\nEnter \n1 List1 \n2 List2 \n3 to cancate two lists \n4 to merge two sorted lists \n0 to exit\n");
       printf("\nchoice:");
       scanf("%d",&ch);
       switch(ch)
       {
           case 1:
           {
               int flag=1;
               printf("\n*********  List 1  *********");
               printf("\nEnter \n1.Push\t2.Append\t3.Insert at position \n4.pop \t\t5.delete at the end \t\t6.delete at position \n7.Reverse \n8.Sort \n9.Display\n0 to exit");
               while(flag==1){
                    printf("\nchoice:");
                    scanf("%d",&c);
                    switch(c){
                    case 1:
                    printf("enter id:");
                    scanf("%d",&num);
                    push(num,&head1);
                    break;
                    
                    case 2:
                    printf("enter id:");
                    scanf("%d",&num);
                    append(num,&head1);
                    break;
           
                    case 3:
                    printf("enter id:");
                    scanf("%d",&num);
                    insert(num,&head1);
                    break;
           
                    case 4:
                    pop(&head1);
                    break;
                    
                    case 5:
                    end(&head1);
                    break;
           
                    case 6:
                    deletepos(&head1);
                    break;
           
                    case 7:
                    reverse(&head1);
                    display(head1);
                    break;
           
                    case 8:
                    sort(&head1);
                    display(head1);
                    break;
                    
                    case 9:
                    display(head1);
                    break;
                    
                    case 0:
                    flag=0;
                    break;
                    
                    default:
                    printf("invalid choice entry\n");
                    break;
                }
            }
            break;
        }
            case 2:{
                int flag=1;
                printf("\n*********  List 2  *********");
                printf("\nEnter \n1.Push \t2.pop \t3.insert at position \n4.pop \t5.delete at the end \t6.delete at position \n7.Reverse \n8.Sort \n9.Display \n0 to exit");
                while(flag==1){
                    printf("\nchoice:");
                    scanf("%d",&c);
                    switch(c){
                    case 1:
                    printf("enter id:");
                    scanf("%d",&num);
                    push(num,&head2);
                    break;
                    
                    case 2:
                    printf("enter id:");
                    scanf("%d",&num);
                    append(num,&head2);
                    break;
           
                    case 3:
                    printf("enter id:");
                    scanf("%d",&num);
                    insert(num,&head2);
                    break;
           
                    case 4:
                    pop(&head2);
                    break;
                    
                    case 5:
                    end(&head2);
                    break;
           
                    case 6:
                    deletepos(&head2);
                    break;
           
                    case 7:
                    reverse(&head2);
                    display(head2);
                    break;
           
                    case 8:
                    sort(&head2);
                    display(head2);
                    break;
                    
                    case 9:
                    display(head2);
                    break;
                    
                    case 0:
                    flag=0;
                    break;
                    
                    default:
                    printf("invalid choice entry\n");
                    break;
                }
                }
            break;
            }
           case 3:
                concate();
                break;
        
           case 4:
                merge();
                break;
                
           case 0:
                exit(0);
                break;
           
           default:
                printf("invalid choice entry");
                break;
       } 
    }    
 return 0;
}      
    
